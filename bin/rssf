#!/usr/bin/env python3
# This file is placed in the Public Domain.


"main program"


import os
import sys
import time
import threading
import _thread


sys.path.insert(0, os.getcwd())


from rssf.handler import Event
from rssf.objects import Default, fmt, update
from rssf.runtime import launch, level


from rssf.irc import init as ircinit
from rssf.rss import init, opml, sync


importlock = threading.RLock()


class Main(Default):

    debug   = False
    gets    = Default()
    ignore  = ""
    init    = ""
    level   = "warn"
    name    = Default.__module__.split(".")[-2]
    opts    = Default()
    otxt    = ""
    sets    = Default()
    verbose = False
    version = 1


"utilities"


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    out(f"{Main.name.upper()} since {tme} ({Main.level.upper()})")


def checkargs():
    if len(sys.argv) < 2:
        out(f"{Main.name} <filename>")
        os._exit(0)
    fnm = sys.argv[1]
    if not os.path.exists(fnm):
        out(f"no {fnm} file found.")
        os._exit(0)
    return fnm


def forever():
    while True:
        try:
            time.sleep(0.1)
        except (KeyboardInterrupt, EOFError):
            _thread.interrupt_main()


def out(txt):
    print(txt.rstrip())
    sys.stdout.flush()


def parse(obj, txt=""):
    if txt == "":
        if "txt" in dir(obj):
            txt = obj.txt
        else:
            txt = ""
    args = []
    obj.args   = []
    obj.cmd    = ""
    obj.gets   = Default()
    obj.index  = None
    obj.mod    = ""
    obj.opts   = ""
    obj.result = {}
    obj.sets   = Default()
    obj.silent = Default()
    obj.txt    = txt
    obj.otxt   = obj.txt
    _nr = -1
    for spli in obj.otxt.split():
        if spli.startswith("-"):
            try:
                obj.index = int(spli[1:])
            except ValueError:
                obj.opts += spli[1:]
            continue
        if "-=" in spli:
            key, value = spli.split("-=", maxsplit=1)
            setattr(obj.silent, key, value)
            setattr(obj.gets, key, value)
            continue
        if "==" in spli:
            key, value = spli.split("==", maxsplit=1)
            setattr(obj.gets, key, value)
            continue
        if "=" in spli:
            key, value = spli.split("=", maxsplit=1)
            if key == "mod":
                if obj.mod:
                    obj.mod += f",{value}"
                else:
                    obj.mod = value
                continue
            setattr(obj.sets, key, value)
            continue
        _nr += 1
        if _nr == 0:
            obj.cmd = spli
            continue
        args.append(spli)
    if args:
        obj.args = args
        obj.txt  = obj.cmd or ""
        obj.rest = " ".join(obj.args)
        obj.txt  = obj.cmd + " " + obj.rest
    else:
        obj.txt = obj.cmd or ""

"runtime"


def main():
    parse(Main, " ".join(sys.argv[1:]))
    Main.level = Main.sets.level or "warn"
    level(Main.level)
    fnm = checkargs()
    banner()
    out(fmt(Main, skip="cmd,sets,txt,otxt", empty=False))
    opml(fnm)
    nrs = sync()
    out(f"{nrs} feeds synced")
    launch(init)
    launch(ircinit)
    forever()


def wrap(func):
    import termios
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        out("")
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)


if __name__ == "__main__":
    wrap(main)
